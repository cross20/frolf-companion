// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  holes         Hole[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

/// Represents a course Frisbee golf can be played on.
model Course {
  id          String   @id @default(cuid())
  name        String   @unique
  urlName     String   @unique
  description String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  published   Boolean  @default(false)
  authorId    String?  @map(name: "author_id")
  author      User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  holes       Hole[]

  @@map(name: "courses")
}

/// Represents a hole within a course.
model Hole {
  id                String  @id @default(cuid())
  name              String
  urlName           String
  description       String
  previousHoleId    String?
  previousHole      Hole?   @relation("SurroundingHoles", fields: [previousHoleId], references: [id], onDelete: SetNull)
  nextHoles         Hole[]  @relation("SurroundingHoles")
  tee               Json
  teeDescription    String
  target            Json
  targetDescription String
  courseId          String  @map("course_id")
  course            Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  authorId          String? @map(name: "author_id")
  author            User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@unique([courseId, name])
  @@unique([courseId, urlName])
  @@unique([courseId, tee, target])
  @@map(name: "holes")
}
